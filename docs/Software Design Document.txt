1. About 
PyMazing is a maze structure generator, with a little flair of D&D became a maze spell. The project  additionally provides classes for maze section definitions as the parts of a maze and a group of functions to generate complex mazes or its parts.
It is intended for maze designers and enthusiast, this means that the generated structure can be then used to paint or generate playable mazes.
It quickly provides a base structure for a maze or a dungeon to play in, by creating the base structure of halls and dead ends, the play area designer only needs to focus on where to place interesting objectives.
A simple method call can create the full maze or it can be constructed by using more specific functions.
The maze structure is thought to be formed from a collection of halls, where the halls are themselves a collection of spaces or areas that can be connected to other adjacent areas by a door or any kind of passage.
Specific areas would be marked as entrance or exit of the maze in order to define the main path that a traveller must cross to complete it.
The complexity of the maze would be defined by the number of halls and how many branches each hall can have, as well as how long (the number of areas) the halls are. 

2. User Interface 
The current interface includes access to the main maze generator function in the wizard module, with an alternative caster class as well. In addition there are minor generator functions to manually to generate other maze sections, if the user wants to have more control on how the shape of the maze should be.
It should be as simple as importing the module, calling the maze function with the needed parameters, or use the wizard class instance to do the same.
The python script wizard is self executable, but its not that useful, it is meant as an example of use but it will be removed later on.

3. Technical Specification 
• How will the software technically work? Are there particular algorithms or libraries that are important?
navigating the maze to validate the structure
• What will be the overall design? Which classes are needed? What design patterns are used to model the concepts and relationships? 
1.- A maze has one or many halls
2.- A hall has one or many areas
3.- halls can be paths or dead ends if they have an area that can be defined as an entrance or exit
4.- areas can be be entrance or exits if they hold a portal
Note: It is advised to use portals a a mean to connect multiple mazes

4. Testing
Each function use case is based on its unit tests.

5. Deployment 
This work is meant to be used as a library, to be used alongside another project or as a standalone script that provides the generated structure.

6. Planning 
DONE
• Define the base structures to represent the maze.
• Test cases show use cases for the generator functions and prove that they produce valid maze sections.
• The standalone script execution prints out the layout of the maze, it can take parameters or generate a random maze within some boundaries.
TODO
• Improve the structure of the current class definitions, by using abstractions.
• Maze generation provides a direction to the maze halls.
• Creating the caster class.

7. Broader Context 
• What are limitations of the current design? 
Current mazes don't provide hall direction, it was a hindsight assumption that the responsibility of hall directions and turning points would rest on the painter of the maze but it makes the current structure hard to follow, so the new milestone is to properly set directions to the many doors an area can have in order to provide non colliding structures (halls that are drawn on top of other halls).
We will start with the idea that areas only have 4 directions to move to, its simple but it will allow the thought process to be encumbered by the infinite number of directions a door can be located on, for example multiple doors on an area that are on the floor, leading to many different halls, like an ant burrow.
• What are possible extensions to think about for the future? 
Infinite doorways per area without hall collition.
Definition of open and closed halls with keys to find.
Definition of additional collectables to find, rather than just finding the exit.
